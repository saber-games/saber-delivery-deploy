---
- name: SD Proxy installation in docker
  hosts: "{{ target | default('all') }}"
  vars:
    env_type: "prod"
    app_image_label: "latest"
    api_token: "{{ undef(hint='You must specify api_token') }}"
    api_url: "{{ undef(hint='You must specify api_url') }}"
    qbt_login: "proxy"
    qbt_password: "{{ undef(hint='You must specify qbt_password') }}"
    qbt_profile_name: "docker"
    qbt_port_webui: "8282"
    qbt_port_nat: "1337"
    qbt_url: "http://host.docker.internal:{{ qbt_port_webui }}"   
    data_dir: "/raid/proxy"
    storage_path: "{{ data_dir }}"
    docker_dir: "/opt/docker"
    docker_proxy_repo: ""
    config_dir: "/opt/docker/data"
    app_container_name: "sd-proxy-scheduler"
    app_image: "saberinteractive/sd-proxy"
    app_image_label: "latest"
    app_dir: "{{ config_dir }}/{{ app_container_name }}"
    app_logs_dir: "{{ app_dir}}/logs"
    qbt_profiles_dir: "{{ config_dir }}/qbt/profiles"
    qbt_config_dir: "{{ qbt_profiles_dir }}/qBittorrent_{{ qbt_profile_name }}/config"
  ignore_unreachable: yes


  pre_tasks:
    - name: Check qbt_password
      assert:
        that: qbt_password | length > 14
        fail_msg: "Check qbt_password length, must be > 14"
        quiet: true

    - name: Check data_dir
      assert:
        that: data_dir is not match('.*/$')
        fail_msg: "Remove data_dir trailing slash"
        quiet: true

  tasks:
    - name: Generate password hash for qBittorrent config
      script:
        cmd: ./../scripts/userpass.py {{ qbt_password }}
        executable: /usr/bin/python3
      register: qbt_password_hashed

    - name: Print qbt password and hash
      debug:
        msg: "Original pass: {{ qbt_password}}; salted hash for qbt config: {{ qbt_password_hashed.stdout_lines }}"

    - name: Create dirs
      file:
        path: "{{ item }}"
        state: directory
        owner: root
        group: root
        mode: 0644
      with_items:
        - "{{ data_dir }}"
        - "{{ app_logs_dir }}"
        - "{{ qbt_config_dir }}"

    - name: Generate files for app
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      with_items:
        - {
            src: "docker-compose.yml.j2",
            dest: "{{ docker_dir }}/docker-compose.yml",
            mode: "0644",
          }
        - {
            src: "qBittorrent.conf.j2",
            dest: "{{ qbt_config_dir }}/qBittorrent.conf",
            mode: "0644",
          }
      notify:
        - Recreate containers

    - name: Pull and recreate containers
      community.docker.docker_compose:
        project_src: "{{ docker_dir }}"
        pull: true
        state: present
        recreate: smart
        # recreate: always


  handlers:
    - name: Recreate containers
      community.docker.docker_compose:
        project_src: "{{ docker_dir }}"
        pull: true
        state: present
        recreate: always

